{"version":3,"sources":["Utils/DrawingUtils.js","CanvasControl.js","LayersDisplay.js","Canvas.js","Utils/UpdateUtils.js","App.js","reportWebVitals.js","index.js"],"names":["drawLayer","ctx","paths","width","height","forEach","value","path","strokeStyle","lineWidth","beginPath","moveTo","i","length","lineTo","stroke","drawPath","console","error","AddLayer","props","setPaths","setActive","handleChange","useCallback","newPaths","slice","push","onClick","BrushSizer","brushSize","setBrushSize","type","onChange","event","target","Download","backgroundColor","aTag","useRef","canvas","document","createElement","getContext","fillStyle","fillRect","layer","ref","href","download","img","toDataURL","replace","current","setAttribute","ColorChooser","color","setColor","className","CanvasControl","setBackgroundColor","MiniLayers","index","active","handleClick","useEffect","LayersDisplay","miniLayers","map","Background","z-index","Layer","handleMouseDown","buttons","nativeEvent","offsetX","offsetY","handleMouseMove","updatePath","onMouseDown","onMouseMove","Canvas","useState","layers","splice","id","App","scale","window","outerHeight","setWidth","setHeight","onresize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e08b7ff7.chunk.js","sourcesContent":["/**\r\n * Draws a single path\r\n * @param {*} ctx 2d drawing context\r\n * @param {*} path the path to draw [\"path\", color, size, start, additional points]\r\n */\r\nexport function drawPath(ctx, width, height, path) {\r\n    ctx.strokeStyle = path[1];\r\n    ctx.lineWidth = path[2];\r\n    ctx.beginPath();\r\n    ctx.moveTo(path[3][0] * width, path[3][1] * height);\r\n    for (let i = 4; i < path.length; i++) {\r\n        ctx.lineTo(path[i][0] * width, path[i][1] * height);\r\n    }\r\n    ctx.stroke();\r\n}\r\n\r\n/**\r\n * Draws all paths of a given layer\r\n * @param {*} ctx \r\n * @param {*} paths \r\n * @param {*} width \r\n * @param {*} height \r\n */\r\nexport function drawLayer(ctx, paths, width, height) {\r\n    paths.forEach((value) => {\r\n        switch (value[0]) {\r\n            case(\"path\"):\r\n                drawPath(ctx, width, height, value);\r\n                break;\r\n            default:\r\n                console.error(\"undefined thingy\");\r\n        }\r\n    });\r\n}\r\n","import {useCallback, useRef} from 'react';\r\nimport {drawLayer} from \"./Utils/DrawingUtils\"\r\n\r\nimport \"./CanvasControl.css\";\r\n\r\n/**\r\n * Control for adding a layer\r\n * @param {*} props \r\n */\r\nfunction AddLayer(props) {\r\n    const {paths, setPaths, setActive} = props;\r\n\r\n    const handleChange = useCallback(() => {\r\n        const newPaths = paths.slice();\r\n        newPaths.push([]);\r\n        setActive(newPaths.length - 1);\r\n        setPaths(newPaths);\r\n    }, [paths, setPaths, setActive]);\r\n\r\n    return (\r\n        <button onClick={handleChange}>\r\n            Add Layer\r\n        </button>\r\n    )\r\n}\r\n\r\n/**\r\n * Used to select brush size\r\n * @param {*} props \r\n */\r\nfunction BrushSizer(props) {\r\n    const {brushSize, setBrushSize} = props;\r\n\r\n    function handleChange(event) {\r\n        setBrushSize(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <span>\r\n            <label>Brush Size:</label>\r\n            <input type=\"number\" value={brushSize} onChange={handleChange}/>\r\n        </span> \r\n    )\r\n}\r\n\r\n/**\r\n * Flattens and downloads image\r\n * @param {*} props \r\n */\r\nfunction Download(props) {\r\n    const {paths, width, height, backgroundColor} = props;\r\n    const aTag = useRef();\r\n    \r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.fillStyle = backgroundColor;\r\n    ctx.fillRect(0, 0, width, height);\r\n    paths.forEach((layer) => {\r\n        drawLayer(ctx, layer, width, height);\r\n    })\r\n\r\n    function onClick() {\r\n        const img = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\r\n        aTag.current.setAttribute(\"href\", img);\r\n    }\r\n\r\n    return (\r\n        <a ref={aTag} href=\"/#\" download=\"canvas.png\">\r\n            <button onClick={onClick}>\r\n                Download Canvas\r\n            </button>\r\n        </a>\r\n    )\r\n}\r\n\r\n/**\r\n * Used to choose brush color\r\n * @param {*} props \r\n */\r\nfunction ColorChooser(props) {\r\n    const {color, setColor} = props;\r\n\r\n    function handleChange(event) {\r\n        setColor(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <input \r\n            className=\"color-chooser\"\r\n            type=\"color\" \r\n            value={color} \r\n            onChange={handleChange} />\r\n    )\r\n}\r\n\r\nfunction CanvasControl(props) {\r\n    const {paths, \r\n            setPaths, \r\n            setActive, \r\n            brushSize, \r\n            setBrushSize, \r\n            color, \r\n            setColor, \r\n            backgroundColor,\r\n            setBackgroundColor,\r\n            width, \r\n            height} = props;\r\n    return (\r\n        <div className=\"canvas-control\">\r\n            Background Color:\r\n            <ColorChooser color={backgroundColor} setColor={setBackgroundColor}/>\r\n            <AddLayer \r\n                paths={paths} \r\n                setPaths={setPaths}\r\n                setActive={setActive} />\r\n            <BrushSizer brushSize={brushSize} setBrushSize={setBrushSize} />\r\n            <ColorChooser color={color} setColor={setColor} />\r\n            <Download paths={paths} width={width} height={height} backgroundColor={backgroundColor}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CanvasControl;","import {useRef, useEffect, useCallback} from 'react';\r\nimport {drawLayer} from \"./Utils/DrawingUtils\";\r\nimport \"./LayersDisplay.css\"\r\n\r\n/**\r\n * Individual mini-layer\r\n * @param {*} props \r\n */\r\nfunction MiniLayers(props) {\r\n    const {width, height, paths, index, active, setActive} = props;\r\n    const canvas = useRef();\r\n\r\n    const handleClick = useCallback(() => {\r\n        setActive(index);\r\n    }, [setActive, index]);\r\n\r\n    useEffect(() => {\r\n        const ctx = canvas.current.getContext('2d');\r\n        drawLayer(ctx, paths[index], width, height);\r\n    }, [paths, width, height, canvas, index]);\r\n\r\n    return (\r\n        <canvas className={`mini-layer ${active && 'active'}`}\r\n            ref={canvas}\r\n            width={width}\r\n            height={height}\r\n            onClick={handleClick}>\r\n        </canvas>\r\n    )\r\n}\r\n\r\n/**\r\n * Display container for mini layers\r\n * @param {*} props \r\n */\r\nfunction LayersDisplay(props) {\r\n    const {paths, width, height, active, setActive} = props;\r\n\r\n    const miniLayers = paths.map((value, index) => {\r\n        return <MiniLayers \r\n                    width={width}\r\n                    height={height}\r\n                    paths={paths}\r\n                    active={active===index}\r\n                    setActive={setActive}\r\n                    index={index} \r\n                    key={index} />\r\n    });\r\n\r\n    return (\r\n        <div className=\"mini-layers-display\">\r\n            {miniLayers}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LayersDisplay;","import {useCallback, useEffect, useRef, useState} from 'react';\r\nimport { drawLayer } from './Utils/DrawingUtils';\r\nimport {updatePath} from './Utils/UpdateUtils';\r\nimport CanvasControl from \"./CanvasControl\";\r\nimport LayersDisplay from \"./LayersDisplay\";\r\nimport \"./Canvas.css\";\r\n\r\nfunction Background(props) {\r\n    const {width, height, color} = props;\r\n    const canvas = useRef();\r\n\r\n    useEffect(() => {\r\n        var ctx = canvas.current.getContext('2d');\r\n        ctx.fillStyle = color;\r\n        ctx.fillRect(0, 0, width, height);\r\n    });\r\n\r\n    return (\r\n        <canvas className='layer'\r\n            ref={canvas}\r\n            z-index={-1}\r\n            width={width}\r\n            height={height}>\r\n        </canvas>\r\n    )\r\n\r\n}\r\n\r\n\r\n/**\r\n * A single layer\r\n * @param {*} props \r\n */\r\nfunction Layer(props) {\r\n    const {width, height, color, brushSize, paths, setPaths, index, active} = props;\r\n    const canvas = useRef();\r\n\r\n    // Path format [type, color, size, start, [points]]\r\n    const handleMouseDown = useCallback((event) => {\r\n        if (event.buttons & 1) {\r\n            const newPaths = paths.slice();\r\n            newPaths[index].push([\"path\",\r\n                color, brushSize, \r\n                [event.nativeEvent.offsetX / width, \r\n                event.nativeEvent.offsetY / height]]);\r\n            setPaths(newPaths);    \r\n        }\r\n    }, [paths, color, brushSize, width, height, setPaths, index]);\r\n\r\n    const handleMouseMove = useCallback((event) => {\r\n        if (event.buttons & 1) {\r\n            updatePath(event, width, height, paths, setPaths, index);\r\n        }\r\n    }, [width, height, paths, setPaths, index]);\r\n\r\n    useEffect(() => {\r\n        const ctx = canvas.current.getContext('2d');\r\n        drawLayer(ctx, paths[index], width, height);\r\n    }, [paths, width, height, canvas, index]);\r\n\r\n    return (\r\n        <canvas className='layer'\r\n            z-index={!active ? index : paths.length}\r\n            ref={canvas}\r\n            width={width}\r\n            height={height}\r\n            onMouseDown={handleMouseDown} \r\n            onMouseMove={handleMouseMove}>\r\n        </canvas>\r\n    )\r\n}\r\n\r\nfunction Canvas(props) {\r\n    const {width, height} = props;\r\n    // const canvas = useRef();\r\n    const [color, setColor] = useState('#000000');\r\n    const [brushSize, setBrushSize] = useState(5);\r\n    const [paths, setPaths] = useState([[]]);\r\n    const [active, setActive] = useState();\r\n    const [backgroundColor, setBackgroundColor] = useState(\"#ffffff\");\r\n\r\n    const layers = paths.map((value, index) => {\r\n        return <Layer\r\n            active={active===index}\r\n            width={width}\r\n            height={height}\r\n            brushSize={brushSize}\r\n            color={color}\r\n            paths={paths}\r\n            setPaths={setPaths}\r\n            index={index}\r\n            key={index} />\r\n    });\r\n    // bit hacky, but it works now\r\n    layers.push(layers.splice(active, 1));\r\n\r\n    return (\r\n        <div className=\"canvas\">\r\n            <div className=\"canvas-container\">\r\n                <CanvasControl\r\n                    paths={paths}\r\n                    setPaths={setPaths}\r\n                    setActive={setActive}\r\n                    brushSize={brushSize}\r\n                    setBrushSize={setBrushSize}\r\n                    color={color}\r\n                    setColor={setColor}\r\n                    backgroundColor={backgroundColor}\r\n                    setBackgroundColor={setBackgroundColor}\r\n                    width={width}\r\n                    height={height}\r\n                />\r\n                <div id=\"layer-container\" width={width * 1.25} height={height * 1.25}>\r\n                    <Background width={width} height={height} color={backgroundColor} />\r\n                    {layers}\r\n                </div>\r\n            </div>\r\n            <LayersDisplay \r\n                paths={paths} \r\n                width={width / 10} \r\n                height={height / 10}\r\n                active={active}\r\n                setActive={setActive} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Canvas;","export function updatePath(event, width, height, paths, setPaths, index) {\r\n    const newPaths = paths.slice();\r\n    const currPath = newPaths[index][newPaths[index].length - 1];\r\n    currPath.push([event.nativeEvent.offsetX / width, \r\n        event.nativeEvent.offsetY / height]);\r\n    setPaths(newPaths);\r\n}","import {useState} from \"react\";\n\nimport './App.css';\nimport Canvas from './Canvas';\n\nfunction App() {\n  const scale = .8;\n  const [width, setWidth] = useState(window.outerHeight * scale * 1.5);\n  const [height, setHeight] = useState(window.outerHeight * scale);\n\n  window.onresize = () => {\n    setWidth(window.outerHeight * scale * 1.5);\n    setHeight(window.outerHeight * scale);\n  }\n\n  return (\n    <div className=\"App\">\n      <Canvas width={width} height={height} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}