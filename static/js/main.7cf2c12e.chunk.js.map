{"version":3,"sources":["Utils/DrawingUtils.js","CanvasControl.js","LayersDisplay.js","Canvas.js","Utils/UpdateUtils.js","App.js","reportWebVitals.js","index.js"],"names":["drawLayer","ctx","paths","width","height","forEach","value","path","strokeStyle","lineWidth","beginPath","moveTo","i","length","lineTo","stroke","drawPath","console","error","Transparent","props","transparent","setTransparent","type","onChange","event","checked","AddLayer","setPaths","setActive","handleChange","useCallback","newPaths","slice","push","onClick","BrushSizer","brushSize","setBrushSize","target","Download","backgroundColor","aTag","useRef","canvas","document","createElement","getContext","fillStyle","fillRect","layer","ref","href","download","img","toDataURL","replace","current","setAttribute","ColorChooser","color","setColor","className","BackgroundChooser","setBackgroundColor","CanvasControl","MiniLayers","index","active","handleClick","useEffect","LayersDisplay","miniLayers","map","Background","clearRect","z-index","Layer","handleMouseDown","buttons","nativeEvent","offsetX","offsetY","handleMouseMove","updatePath","onMouseDown","onMouseMove","Canvas","useState","layers","splice","id","App","scale","window","outerHeight","setWidth","setHeight","onresize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7cf2c12e.chunk.js","sourcesContent":["/**\r\n * Draws a single path\r\n * @param {*} ctx 2d drawing context\r\n * @param {*} path the path to draw [\"path\", color, size, start, additional points]\r\n */\r\nexport function drawPath(ctx, width, height, path) {\r\n    ctx.strokeStyle = path[1];\r\n    ctx.lineWidth = path[2];\r\n    ctx.beginPath();\r\n    ctx.moveTo(path[3][0] * width, path[3][1] * height);\r\n    for (let i = 4; i < path.length; i++) {\r\n        ctx.lineTo(path[i][0] * width, path[i][1] * height);\r\n    }\r\n    ctx.stroke();\r\n}\r\n\r\n/**\r\n * Draws all paths of a given layer\r\n * @param {*} ctx \r\n * @param {*} paths \r\n * @param {*} width \r\n * @param {*} height \r\n */\r\nexport function drawLayer(ctx, paths, width, height) {\r\n    paths.forEach((value) => {\r\n        switch (value[0]) {\r\n            case(\"path\"):\r\n                drawPath(ctx, width, height, value);\r\n                break;\r\n            default:\r\n                console.error(\"undefined thingy\");\r\n        }\r\n    });\r\n}\r\n","import {useCallback, useRef} from 'react';\r\nimport {drawLayer} from \"./Utils/DrawingUtils\"\r\n\r\nimport \"./CanvasControl.css\";\r\n\r\n/**\r\n * Choose a transparent background.\r\n * Or not.\r\n * @param {*} props \r\n */\r\nfunction Transparent(props) {\r\n    const {transparent, setTransparent} = props;\r\n\r\n    function handleChange(event) {\r\n        setTransparent(!transparent);\r\n    }\r\n\r\n    return (\r\n        <span>\r\n            <label>\r\n                Transparent background?\r\n                <input type=\"checkbox\" onChange={handleChange} checked={transparent}/>\r\n            </label>\r\n        </span>\r\n    )\r\n}\r\n\r\n/**\r\n * Control for adding a layer\r\n * @param {*} props \r\n */\r\nfunction AddLayer(props) {\r\n    const {paths, setPaths, setActive} = props;\r\n\r\n    const handleChange = useCallback(() => {\r\n        const newPaths = paths.slice();\r\n        newPaths.push([]);\r\n        setActive(newPaths.length - 1);\r\n        setPaths(newPaths);\r\n    }, [paths, setPaths, setActive]);\r\n\r\n    return (\r\n        <button onClick={handleChange}>\r\n            Add Layer\r\n        </button>\r\n    )\r\n}\r\n\r\n/**\r\n * Used to select brush size\r\n * @param {*} props \r\n */\r\nfunction BrushSizer(props) {\r\n    const {brushSize, setBrushSize} = props;\r\n\r\n    function handleChange(event) {\r\n        setBrushSize(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <span>\r\n            <label>Brush Size:</label>\r\n            <input type=\"number\" value={brushSize} onChange={handleChange}/>\r\n        </span> \r\n    )\r\n}\r\n\r\n/**\r\n * Flattens and downloads image\r\n * @param {*} props \r\n */\r\nfunction Download(props) {\r\n    const {paths, width, height, backgroundColor, transparent} = props;\r\n    const aTag = useRef();\r\n    \r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    const ctx = canvas.getContext('2d');\r\n    if (!transparent) {\r\n        ctx.fillStyle = backgroundColor;\r\n        ctx.fillRect(0, 0, width, height);    \r\n    }\r\n    paths.forEach((layer) => {\r\n        drawLayer(ctx, layer, width, height);\r\n    })\r\n\r\n    function onClick() {\r\n        const img = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\r\n        aTag.current.setAttribute(\"href\", img);\r\n    }\r\n\r\n    return (\r\n        <a ref={aTag} href=\"/#\" download=\"canvas.png\">\r\n            <button onClick={onClick}>\r\n                Download Canvas\r\n            </button>\r\n        </a>\r\n    )\r\n}\r\n\r\n/**\r\n * Used to choose brush color\r\n * @param {*} props \r\n */\r\nfunction ColorChooser(props) {\r\n    const {color, setColor} = props;\r\n\r\n    function handleChange(event) {\r\n        setColor(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <input \r\n            className=\"color-chooser\"\r\n            type=\"color\" \r\n            value={color} \r\n            onChange={handleChange} />\r\n    )\r\n}\r\n\r\nfunction BackgroundChooser(props) {\r\n    const {backgroundColor, setBackgroundColor} = props;\r\n\r\n    return (\r\n        <span>\r\n            Background Color:\r\n            <ColorChooser color={backgroundColor} setColor={setBackgroundColor}/>\r\n        </span>\r\n    )\r\n}\r\n\r\nfunction CanvasControl(props) {\r\n    const {paths, \r\n            setPaths, \r\n            setActive, \r\n            brushSize, \r\n            setBrushSize, \r\n            color, \r\n            setColor, \r\n            backgroundColor,\r\n            setBackgroundColor,\r\n            transparent,\r\n            setTransparent,\r\n            width, \r\n            height} = props;\r\n    return (\r\n        <div className=\"canvas-control\">\r\n            <Transparent transparent={transparent} setTransparent={setTransparent} />\r\n            { !transparent &&\r\n                <BackgroundChooser backgroundColor={backgroundColor} setBackgroundColor={setBackgroundColor} />\r\n            }\r\n            <AddLayer \r\n                paths={paths} \r\n                setPaths={setPaths}\r\n                setActive={setActive} />\r\n            <BrushSizer brushSize={brushSize} setBrushSize={setBrushSize} />\r\n            <ColorChooser color={color} setColor={setColor} />\r\n            <Download \r\n                paths={paths} \r\n                width={width} \r\n                height={height} \r\n                backgroundColor={backgroundColor}\r\n                transparent={transparent} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CanvasControl;","import {useRef, useEffect, useCallback} from 'react';\r\nimport {drawLayer} from \"./Utils/DrawingUtils\";\r\nimport \"./LayersDisplay.css\"\r\n\r\n/**\r\n * Individual mini-layer\r\n * @param {*} props \r\n */\r\nfunction MiniLayers(props) {\r\n    const {width, height, paths, index, active, setActive} = props;\r\n    const canvas = useRef();\r\n\r\n    const handleClick = useCallback(() => {\r\n        setActive(index);\r\n    }, [setActive, index]);\r\n\r\n    useEffect(() => {\r\n        const ctx = canvas.current.getContext('2d');\r\n        drawLayer(ctx, paths[index], width, height);\r\n    }, [paths, width, height, canvas, index]);\r\n\r\n    return (\r\n        <canvas className={`mini-layer ${active && 'active'}`}\r\n            ref={canvas}\r\n            width={width}\r\n            height={height}\r\n            onClick={handleClick}>\r\n        </canvas>\r\n    )\r\n}\r\n\r\n/**\r\n * Display container for mini layers\r\n * @param {*} props \r\n */\r\nfunction LayersDisplay(props) {\r\n    const {paths, width, height, active, setActive} = props;\r\n\r\n    const miniLayers = paths.map((value, index) => {\r\n        return <MiniLayers \r\n                    width={width}\r\n                    height={height}\r\n                    paths={paths}\r\n                    active={active===index}\r\n                    setActive={setActive}\r\n                    index={index} \r\n                    key={index} />\r\n    });\r\n\r\n    return (\r\n        <div className=\"mini-layers-display\">\r\n            {miniLayers}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LayersDisplay;","import {useCallback, useEffect, useRef, useState} from 'react';\r\nimport { drawLayer } from './Utils/DrawingUtils';\r\nimport {updatePath} from './Utils/UpdateUtils';\r\nimport CanvasControl from \"./CanvasControl\";\r\nimport LayersDisplay from \"./LayersDisplay\";\r\nimport \"./Canvas.css\";\r\n\r\nfunction Background(props) {\r\n    const {width, height, color, transparent} = props;\r\n    const canvas = useRef();\r\n\r\n    useEffect(() => {\r\n        var ctx = canvas.current.getContext('2d');\r\n        if (!transparent) {\r\n            ctx.fillStyle = color;\r\n            ctx.fillRect(0, 0, width, height);    \r\n        } else {\r\n            ctx.clearRect(0, 0, width, height);\r\n        }\r\n    });\r\n\r\n    return (\r\n        <canvas className='layer'\r\n            ref={canvas}\r\n            z-index={-1}\r\n            width={width}\r\n            height={height}>\r\n        </canvas>\r\n    )\r\n\r\n}\r\n\r\n\r\n/**\r\n * A single layer\r\n * @param {*} props \r\n */\r\nfunction Layer(props) {\r\n    const {width, height, color, brushSize, paths, setPaths, index, active} = props;\r\n    const canvas = useRef();\r\n\r\n    // Path format [type, color, size, start, [points]]\r\n    const handleMouseDown = useCallback((event) => {\r\n        if (event.buttons & 1) {\r\n            const newPaths = paths.slice();\r\n            newPaths[index].push([\"path\",\r\n                color, brushSize, \r\n                [event.nativeEvent.offsetX / width, \r\n                event.nativeEvent.offsetY / height]]);\r\n            setPaths(newPaths);    \r\n        }\r\n    }, [paths, color, brushSize, width, height, setPaths, index]);\r\n\r\n    const handleMouseMove = useCallback((event) => {\r\n        if (event.buttons & 1) {\r\n            updatePath(event, width, height, paths, setPaths, index);\r\n        }\r\n    }, [width, height, paths, setPaths, index]);\r\n\r\n    useEffect(() => {\r\n        const ctx = canvas.current.getContext('2d');\r\n        drawLayer(ctx, paths[index], width, height);\r\n    }, [paths, width, height, canvas, index]);\r\n\r\n    return (\r\n        <canvas className='layer'\r\n            z-index={!active ? index : index}\r\n            ref={canvas}\r\n            width={width}\r\n            height={height}\r\n            onMouseDown={handleMouseDown} \r\n            onMouseMove={handleMouseMove}>\r\n        </canvas>\r\n    )\r\n}\r\n\r\nfunction Canvas(props) {\r\n    const {width, height} = props;\r\n    // const canvas = useRef();\r\n    const [color, setColor] = useState('#000000');\r\n    const [brushSize, setBrushSize] = useState(5);\r\n    const [paths, setPaths] = useState([[]]);\r\n    const [active, setActive] = useState();\r\n    const [backgroundColor, setBackgroundColor] = useState(\"#ffffff\");\r\n    const [transparent, setTransparent] = useState(true);\r\n\r\n    const layers = paths.map((value, index) => {\r\n        return <Layer\r\n            active={active===index}\r\n            width={width}\r\n            height={height}\r\n            brushSize={brushSize}\r\n            color={color}\r\n            paths={paths}\r\n            setPaths={setPaths}\r\n            index={index}\r\n            key={index} />\r\n    });\r\n    // bit hacky, but it works now\r\n    layers.push(layers.splice(active, 1));\r\n\r\n    return (\r\n        <div className=\"canvas\">\r\n            <div className=\"canvas-container\">\r\n                <CanvasControl\r\n                    paths={paths}\r\n                    setPaths={setPaths}\r\n                    setActive={setActive}\r\n                    brushSize={brushSize}\r\n                    setBrushSize={setBrushSize}\r\n                    color={color}\r\n                    setColor={setColor}\r\n                    backgroundColor={backgroundColor}\r\n                    setBackgroundColor={setBackgroundColor}\r\n                    transparent={transparent}\r\n                    setTransparent={setTransparent}\r\n                    width={width}\r\n                    height={height}\r\n                />\r\n                <div id=\"layer-container\" width={width * 1.25} height={height * 1.25}>\r\n                    <Background \r\n                        width={width} \r\n                        height={height} \r\n                        color={backgroundColor} \r\n                        transparent={transparent} />\r\n                    {layers}\r\n                </div>\r\n            </div>\r\n            <LayersDisplay \r\n                paths={paths} \r\n                width={width / 10} \r\n                height={height / 10}\r\n                active={active}\r\n                setActive={setActive} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Canvas;","export function updatePath(event, width, height, paths, setPaths, index) {\r\n    const newPaths = paths.slice();\r\n    const currPath = newPaths[index][newPaths[index].length - 1];\r\n    currPath.push([event.nativeEvent.offsetX / width, \r\n        event.nativeEvent.offsetY / height]);\r\n    setPaths(newPaths);\r\n}","import {useState} from \"react\";\n\nimport './App.css';\nimport Canvas from './Canvas';\n\nfunction App() {\n  const scale = .8;\n  const [width, setWidth] = useState(window.outerHeight * scale * 1.5);\n  const [height, setHeight] = useState(window.outerHeight * scale);\n\n  window.onresize = () => {\n    setWidth(window.outerHeight * scale * 1.5);\n    setHeight(window.outerHeight * scale);\n  }\n\n  return (\n    <div className=\"App\">\n      <Canvas width={width} height={height} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}