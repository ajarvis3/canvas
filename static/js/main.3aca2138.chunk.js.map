{"version":3,"sources":["Utils/DrawingUtils.js","CanvasControl/Shared.js","CanvasControl/BackgroundOptions.js","Constants.js","CanvasControl/BrushOptions.js","CanvasControl/DownloadOptions.js","CanvasControl/LayerOptions.js","CanvasControl/CanvasControl.js","LayersDisplay.js","Canvas.js","Utils/UpdateUtils.js","App.js","reportWebVitals.js","index.js"],"names":["drawCommonAll","ctx","path","strokeScale","strokeStyle","lineWidth","beginPath","drawPathCommon","width","height","moveTo","i","length","lineTo","drawPath","stroke","drawPolygon","closePath","drawRectangle","x","y","w","h","rect","drawLayer","paths","clearRect","forEach","value","console","error","ColorChooser","props","color","setColor","tipText","className","type","onChange","event","target","Transparent","transparent","setTransparent","onClick","BackgroundOptions","backgroundColor","setBackgroundColor","brushes","BrushSizer","brushSize","setBrushSize","Brush","active","brush","setBrush","BrushChooser","brushType","setBrushType","elems","map","index","BrushOptions","Download","aTag","useRef","canvas","document","createElement","getContext","fillStyle","fillRect","layer","ref","href","download","img","toDataURL","replace","current","setAttribute","DownloadOptions","AddLayer","setPaths","setActive","handleChange","useCallback","newPaths","slice","push","LayerOptions","CanvasControl","MiniLayers","handleClick","useEffect","LayersDisplay","miniLayers","Background","z-index","Layer","handleMouseDown","buttons","nativeEvent","offsetX","offsetY","handleMouseMove","updatePath","updateRect","onMouseDown","onMouseMove","Canvas","useState","layers","splice","id","App","setWidth","setHeight","setDimensions","body","window","base","clientHeight","clientWidth","onresize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3aca2138.chunk.js","sourcesContent":["/**\r\n * Lines common to all\r\n * @param {*} ctx \r\n * @param {*} path \r\n * @param {*} strokeScale \r\n */\r\nfunction drawCommonAll(ctx, path, strokeScale) {\r\n    ctx.strokeStyle = path[1];\r\n    ctx.lineWidth = path[2] * strokeScale;\r\n    ctx.beginPath();\r\n}\r\n\r\n/**\r\n * Code common to drawPath and drawPolygon\r\n * @param {*} ctx \r\n * @param {*} width \r\n * @param {*} height \r\n * @param {*} path \r\n */\r\nfunction drawPathCommon(ctx, width, height, path, strokeScale) {\r\n    drawCommonAll(ctx, path, strokeScale);\r\n    ctx.moveTo(path[3][0] * width, path[3][1] * height);\r\n    for (let i = 4; i < path.length; i++) {\r\n        ctx.lineTo(path[i][0] * width, path[i][1] * height);\r\n    }\r\n}\r\n\r\n/**\r\n * Draws a single path\r\n * @param {*} ctx 2d drawing context\r\n * @param {*} path the path to draw [\"path\", color, size, start, additional points]\r\n */\r\nexport function drawPath(ctx, width, height, path, strokeScale = 1) {\r\n    drawPathCommon(ctx, width, height, path, strokeScale);\r\n    ctx.stroke();\r\n}\r\n\r\nexport function drawPolygon(ctx, width, height, path, strokeScale = 1) {\r\n    drawPathCommon(ctx, width, height, path, strokeScale);\r\n    ctx.closePath();\r\n    ctx.stroke();\r\n}\r\n\r\nexport function drawRectangle(ctx, width, height, path, strokeScale = 1) {\r\n    drawCommonAll(ctx, path, strokeScale);\r\n    const x = path[3][0] * width;\r\n    const y = path[3][1] * height;\r\n    const w = path[4][0] * width - x;\r\n    const h = path[4][1] * height - y;\r\n    ctx.rect(x, y, w, h);\r\n    ctx.stroke();\r\n}\r\n\r\n/**\r\n * Draws all paths of a given layer\r\n * @param {*} ctx \r\n * @param {*} paths \r\n * @param {*} width \r\n * @param {*} height \r\n */\r\nexport function drawLayer(ctx, paths, width, height, strokeScale = 1) {\r\n    ctx.clearRect(0, 0, width, height);\r\n    paths.forEach((value) => {\r\n        switch (value[0]) {\r\n            case(\"Brush\"):\r\n                drawPath(ctx, width, height, value, strokeScale);\r\n                break;\r\n            case(\"Polygon\"):\r\n                drawPolygon(ctx, width, height, value, strokeScale);\r\n                break;\r\n            case(\"Rectangle\"):\r\n                drawRectangle(ctx, width, height, value, strokeScale);\r\n                break;\r\n            default:\r\n                console.error(\"undefined thingy\");\r\n        }\r\n    });\r\n}\r\n","/**\r\n * File for function components used by multiple other files\r\n */\r\nimport \"./CanvasControl.css\"\r\n\r\n/**\r\n * Used to choose a color\r\n * @param {*} props \r\n */\r\nexport function ColorChooser(props) {\r\n    const {color, setColor, tipText} = props;\r\n\r\n    function handleChange(event) {\r\n        setColor(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <span className=\"icon-container\">\r\n            <input \r\n                className=\"color-chooser\"\r\n                type=\"color\" \r\n                value={color} \r\n                onChange={handleChange} />\r\n            <span className=\"tooltiptext\">\r\n                {tipText}\r\n            </span>\r\n        </span>\r\n    )\r\n}\r\n","import \"./CanvasControl.css\";\r\nimport {ColorChooser} from \"./Shared\";\r\nimport {BsCheckCircle, BsCircle} from 'react-icons/bs';\r\n\r\n/**\r\n * Choose a transparent background.\r\n * Or not.\r\n * @param {*} props \r\n */\r\nfunction Transparent(props) {\r\n    const {transparent, setTransparent} = props;\r\n\r\n    function handleChange() {\r\n        setTransparent(!transparent);\r\n    }\r\n\r\n    return (\r\n        <span className=\"icon-container\" onClick={handleChange}>\r\n            {transparent ? <BsCheckCircle /> : <BsCircle /> }\r\n            <span className=\"tooltiptext\">Transparent Background?</span>\r\n        </span>\r\n    )\r\n}\r\n\r\n/**\r\n * Contains Options related to Background\r\n * @param {*} props \r\n */\r\nfunction BackgroundOptions(props) {\r\n    const {transparent, setTransparent, backgroundColor, setBackgroundColor} = props;\r\n\r\n    return (\r\n        <span>\r\n            <Transparent transparent={transparent} setTransparent={setTransparent} />\r\n            { !transparent &&\r\n                <ColorChooser\r\n                    color={backgroundColor} \r\n                    setColor={setBackgroundColor}\r\n                    tipText=\"Background Color\" />\r\n            }\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default BackgroundOptions;","import { BsBrush } from 'react-icons/bs';\r\nimport { BiShapePolygon, BiShapeCircle, BiShapeSquare } from 'react-icons/bi';\r\n\r\nexport const brushes = [\r\n    [\"Brush\", <BsBrush />],\r\n    [\"Polygon\", <BiShapePolygon />],\r\n    [\"Circle\", <BiShapeCircle />],\r\n    [\"Rectangle\", <BiShapeSquare />]\r\n];\r\n","import \"./CanvasControl.css\";\r\nimport \"./BrushOptions.css\"\r\n\r\nimport {ColorChooser} from \"./Shared\";\r\nimport {brushes} from \"../Constants\";\r\n\r\n/**\r\n * Used to select brush size\r\n * @param {*} props \r\n */\r\nfunction BrushSizer(props) {\r\n    const {brushSize, setBrushSize} = props;\r\n\r\n    function handleChange(event) {\r\n        setBrushSize(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <span>\r\n            <label>Brush Size:</label>\r\n            <input type=\"number\" value={brushSize} onChange={handleChange}/>\r\n        </span> \r\n    )\r\n}\r\n\r\n/**\r\n * Brush types\r\n * @param {*} props \r\n */\r\nfunction Brush(props) {\r\n    const {active, brush, setBrush} = props;\r\n\r\n    return (\r\n        <span className=\"brush-container\" onClick={setBrush}>\r\n            {brush[1]}\r\n            {!active &&\r\n                <span className=\"tooltiptext\">\r\n                    {brush[0]}\r\n                </span>\r\n            }\r\n        </span>\r\n    )\r\n}\r\n\r\n/**\r\n * Used to select drawing tool\r\n * @param {*} props \r\n */\r\nfunction BrushChooser(props) {\r\n    const {brushType, setBrushType} = props;\r\n\r\n    const elems = brushes.map((value, index) => {\r\n        return <Brush brush={value} key={index} setBrush={() => setBrushType(value)} />;\r\n    });\r\n\r\n    return (\r\n        <span className=\"brush-chooser\">\r\n            <Brush brush={brushType} setBrush={() => {}} active/>\r\n            <span className=\"brushes\">\r\n                {elems}\r\n            </span>\r\n        </span>\r\n    )\r\n}\r\n\r\n/**\r\n * Options related to the brush\r\n * @param {*} props \r\n */\r\nfunction BrushOptions(props) {\r\n    const {brushSize, \r\n            setBrushSize, \r\n            color, \r\n            setColor, \r\n            brushType, \r\n            setBrushType} = props;\r\n\r\n    return (\r\n        <span>\r\n            <BrushChooser brushType={brushType} setBrushType={setBrushType} />\r\n            <BrushSizer brushSize={brushSize} setBrushSize={setBrushSize} />\r\n            <ColorChooser \r\n                color={color} \r\n                setColor={setColor}\r\n                tipText=\"Brush Color\" />\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default BrushOptions;\r\n","import {useRef} from 'react';\r\nimport {BsDownload} from 'react-icons/bs';\r\n\r\nimport {drawLayer} from \"../Utils/DrawingUtils\";\r\n\r\nimport \"./CanvasControl.css\"\r\n\r\n/**\r\n * Flattens and downloads image\r\n * @param {*} props \r\n */\r\nfunction Download(props) {\r\n    const {paths, width, height, backgroundColor, transparent} = props;\r\n    const aTag = useRef();\r\n    \r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    const ctx = canvas.getContext('2d');\r\n    if (!transparent) {\r\n        ctx.fillStyle = backgroundColor;\r\n        ctx.fillRect(0, 0, width, height);    \r\n    }\r\n    paths.forEach((layer) => {\r\n        drawLayer(ctx, layer, width, height);\r\n    })\r\n\r\n    function onClick() {\r\n        const img = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\r\n        aTag.current.setAttribute(\"href\", img);\r\n    }\r\n\r\n    return (\r\n        <a ref={aTag} href=\"/#\" download=\"canvas.png\" className=\"icon-container\">\r\n            <BsDownload onClick={onClick}/>\r\n            <span className=\"tooltiptext\">Download</span>\r\n        </a>\r\n    )\r\n}\r\n\r\n/**\r\n * Options for downloading\r\n * @param {*} props \r\n */\r\nfunction DownloadOptions(props) {\r\n    const {paths, width, height, backgroundColor, transparent} = props;\r\n\r\n    return (\r\n        <span>\r\n            <Download \r\n                paths={paths} \r\n                width={width} \r\n                height={height} \r\n                backgroundColor={backgroundColor}\r\n                transparent={transparent} />\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default DownloadOptions;\r\n","import {useCallback} from 'react';\r\n\r\nimport {BsLayersFill} from 'react-icons/bs';\r\n\r\n/**\r\n * Control for adding a layer\r\n * @param {*} props \r\n */\r\nfunction AddLayer(props) {\r\n    const {paths, setPaths, setActive} = props;\r\n\r\n    const handleChange = useCallback(() => {\r\n        const newPaths = paths.slice();\r\n        newPaths.push([]);\r\n        setActive(newPaths.length - 1);\r\n        setPaths(newPaths);\r\n    }, [paths, setPaths, setActive]);\r\n\r\n    return (\r\n        <span className=\"icon-container\" onClick={handleChange}>\r\n            <BsLayersFill />\r\n            <span className=\"tooltiptext\">Add a Layer</span>\r\n        </span>\r\n    )\r\n}\r\n\r\n\r\n/**\r\n * Contains Options related to layers\r\n * @param {*} props \r\n */\r\nfunction LayerOptions(props) {\r\n    const {paths, setPaths, setActive} = props;\r\n\r\n    return (\r\n        <span>\r\n            <AddLayer \r\n                paths={paths} \r\n                setPaths={setPaths}\r\n                setActive={setActive} />\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default LayerOptions;\r\n","import BackgroundOptions from \"./BackgroundOptions\";\r\nimport BrushOptions from \"./BrushOptions\";\r\nimport DownloadOptions from \"./DownloadOptions\";\r\nimport LayerOptions from \"./LayerOptions\";\r\n\r\nimport \"./CanvasControl.css\";\r\n\r\nfunction CanvasControl(props) {\r\n    const {paths, \r\n            setPaths, \r\n            setActive, \r\n            brushSize, \r\n            setBrushSize, \r\n            color, \r\n            setColor, \r\n            backgroundColor,\r\n            setBackgroundColor,\r\n            transparent,\r\n            setTransparent,\r\n            width, \r\n            height,\r\n            brushType,\r\n            setBrushType} = props;\r\n    return (\r\n        <div className=\"canvas-control\">\r\n            <BackgroundOptions \r\n                transparent={transparent}\r\n                setTransparent={setTransparent}\r\n                backgroundColor={backgroundColor}\r\n                setBackgroundColor={setBackgroundColor} />\r\n            <LayerOptions \r\n                paths={paths} \r\n                setPaths={setPaths}\r\n                setActive={setActive} />\r\n            <BrushOptions\r\n                brushSize={brushSize}\r\n                setBrushSize={setBrushSize}\r\n                brushType={brushType}\r\n                setBrushType={setBrushType}\r\n                color={color}\r\n                setColor={setColor} />\r\n            <DownloadOptions \r\n                paths={paths} \r\n                width={width} \r\n                height={height} \r\n                backgroundColor={backgroundColor}\r\n                transparent={transparent} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CanvasControl;","import {useRef, useEffect, useCallback} from 'react';\r\nimport {drawLayer} from \"./Utils/DrawingUtils\";\r\nimport \"./LayersDisplay.css\"\r\n\r\n/**\r\n * Individual mini-layer\r\n * @param {*} props \r\n */\r\nfunction MiniLayers(props) {\r\n    const {width, height, paths, index, active, setActive} = props;\r\n    const canvas = useRef();\r\n\r\n    const handleClick = useCallback(() => {\r\n        setActive(index);\r\n    }, [setActive, index]);\r\n\r\n    useEffect(() => {\r\n        const ctx = canvas.current.getContext('2d');\r\n        drawLayer(ctx, paths[index], width, height, .1);\r\n    }, [paths, width, height, canvas, index]);\r\n\r\n    return (\r\n        <canvas className={`mini-layer ${active && 'active'}`}\r\n            ref={canvas}\r\n            width={width}\r\n            height={height}\r\n            onClick={handleClick}>\r\n        </canvas>\r\n    )\r\n}\r\n\r\n/**\r\n * Display container for mini layers\r\n * @param {*} props \r\n */\r\nfunction LayersDisplay(props) {\r\n    const {paths, width, height, active, setActive} = props;\r\n\r\n    const miniLayers = paths.map((value, index) => {\r\n        return <MiniLayers \r\n                    width={width}\r\n                    height={height}\r\n                    paths={paths}\r\n                    active={active===index}\r\n                    setActive={setActive}\r\n                    index={index} \r\n                    key={index} />\r\n    });\r\n\r\n    return (\r\n        <div className=\"mini-layers-display\">\r\n            {miniLayers}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LayersDisplay;","import {useCallback, useEffect, useRef, useState} from 'react';\r\nimport { drawLayer } from './Utils/DrawingUtils';\r\nimport {updatePath, updateRect} from './Utils/UpdateUtils';\r\nimport CanvasControl from \"./CanvasControl/CanvasControl\";\r\nimport LayersDisplay from \"./LayersDisplay\";\r\nimport \"./Canvas.css\";\r\nimport {brushes} from \"./Constants\";\r\n\r\nfunction Background(props) {\r\n    const {width, height, color, transparent} = props;\r\n    const canvas = useRef();\r\n\r\n    useEffect(() => {\r\n        var ctx = canvas.current.getContext('2d');\r\n        if (!transparent) {\r\n            ctx.fillStyle = color;\r\n            ctx.fillRect(0, 0, width, height);    \r\n        } else {\r\n            ctx.clearRect(0, 0, width, height);\r\n        }\r\n    });\r\n\r\n    return (\r\n        <canvas className='layer'\r\n            ref={canvas}\r\n            z-index={-1}\r\n            width={width}\r\n            height={height}>\r\n        </canvas>\r\n    )\r\n\r\n}\r\n\r\n\r\n/**\r\n * A single layer\r\n * @param {*} props \r\n */\r\nfunction Layer(props) {\r\n    const {width, \r\n            height, \r\n            color, \r\n            brushSize, \r\n            paths, \r\n            setPaths, \r\n            index, \r\n            active,\r\n            brushType} = props;\r\n    const canvas = useRef();\r\n\r\n    // Path format [type, color, size, start, [points]]\r\n    const handleMouseDown = useCallback((event) => {\r\n        if (event.buttons & 1) {\r\n            const newPaths = paths.slice();\r\n            if (brushType[0] === \"Brush\" || brushType[0] === \"Polygon\") {\r\n                newPaths[index].push([brushType[0],\r\n                    color, brushSize, \r\n                    [event.nativeEvent.offsetX / width, \r\n                    event.nativeEvent.offsetY / height]]);    \r\n            } else if (brushType[0] === \"Rectangle\") {\r\n                newPaths[index].push([brushType[0],\r\n                    color, brushSize, \r\n                    [event.nativeEvent.offsetX / width, \r\n                    event.nativeEvent.offsetY / height],\r\n                    [event.nativeEvent.offsetX / width, \r\n                    event.nativeEvent.offsetY / height]]);    \r\n            }\r\n            setPaths(newPaths);    \r\n        }\r\n    }, [paths, color, brushSize, width, height, setPaths, index, brushType]);\r\n\r\n    const handleMouseMove = useCallback((event) => {\r\n        if (event.buttons & 1) {\r\n            if (brushType[0] === \"Brush\" || brushType[0] === \"Polygon\") {\r\n                updatePath(event, width, height, paths, setPaths, index);\r\n            } else if (brushType[0] === \"Rectangle\") {\r\n                updateRect(event, width, height, paths, setPaths, index);\r\n            }\r\n        }\r\n    }, [width, height, paths, setPaths, index, brushType]);\r\n\r\n    useEffect(() => {\r\n        const ctx = canvas.current.getContext('2d');\r\n        drawLayer(ctx, paths[index], width, height);\r\n    }, [paths, width, height, canvas, index]);\r\n\r\n    return (\r\n        <canvas className='layer'\r\n            z-index={!active ? index : index}\r\n            ref={canvas}\r\n            width={width}\r\n            height={height}\r\n            onMouseDown={handleMouseDown} \r\n            onMouseMove={handleMouseMove}>\r\n        </canvas>\r\n    )\r\n}\r\n\r\nfunction Canvas(props) {\r\n    const {width, height} = props;\r\n    // const canvas = useRef();\r\n    const [color, setColor] = useState('#000000');\r\n    const [brushSize, setBrushSize] = useState(5);\r\n    const [brushType, setBrushType] = useState(brushes[0]);\r\n    const [paths, setPaths] = useState([[]]);\r\n    const [active, setActive] = useState();\r\n    const [backgroundColor, setBackgroundColor] = useState(\"#ffffff\");\r\n    const [transparent, setTransparent] = useState(true);\r\n\r\n    const layers = paths.map((value, index) => {\r\n        return <Layer\r\n            active={active===index}\r\n            width={width}\r\n            height={height}\r\n            brushSize={brushSize}\r\n            color={color}\r\n            paths={paths}\r\n            setPaths={setPaths}\r\n            index={index}\r\n            key={index}\r\n            brushType={brushType} />\r\n    });\r\n    // bit hacky, but it works now\r\n    layers.push(layers.splice(active, 1));\r\n\r\n    return (\r\n        <div className=\"canvas\">\r\n            <div className=\"canvas-container\">\r\n                <CanvasControl\r\n                    paths={paths}\r\n                    setPaths={setPaths}\r\n                    setActive={setActive}\r\n                    brushSize={brushSize}\r\n                    setBrushSize={setBrushSize}\r\n                    color={color}\r\n                    setColor={setColor}\r\n                    backgroundColor={backgroundColor}\r\n                    setBackgroundColor={setBackgroundColor}\r\n                    transparent={transparent}\r\n                    setTransparent={setTransparent}\r\n                    width={width}\r\n                    height={height}\r\n                    brushType={brushType}\r\n                    setBrushType={setBrushType}\r\n                />\r\n                <div id=\"layer-container\" width={width * 1.25} height={height * 1.25}>\r\n                    <Background \r\n                        width={width} \r\n                        height={height} \r\n                        color={backgroundColor} \r\n                        transparent={transparent} />\r\n                    {layers}\r\n                </div>\r\n            </div>\r\n            <LayersDisplay \r\n                paths={paths} \r\n                width={width / 10} \r\n                height={height / 10}\r\n                active={active}\r\n                setActive={setActive} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Canvas;","export function updatePath(event, width, height, paths, setPaths, index) {\r\n    const newPaths = paths.slice();\r\n    const currPath = newPaths[index][newPaths[index].length - 1];\r\n    currPath.push([event.nativeEvent.offsetX / width, \r\n        event.nativeEvent.offsetY / height]);\r\n    setPaths(newPaths);\r\n}\r\n\r\nexport function updateRect(event, width, height, paths, setPaths, index) {\r\n    const newPaths = paths.slice();\r\n    const currPath = newPaths[index][newPaths[index].length - 1];\r\n    currPath[4] = [event.nativeEvent.offsetX / width, \r\n        event.nativeEvent.offsetY / height];\r\n    setPaths(newPaths);\r\n}\r\n","import {useEffect, useState} from \"react\";\n\nimport './App.css';\nimport Canvas from './Canvas';\n\nfunction App() {\n  const scale = .75;\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n\n  function setDimensions() {\n    const body = window.document.body\n    const base = body.clientHeight * 1.5 > body.clientWidth ? \n                  body.clientWidth * 2 / 3: body.clientHeight;\n    setWidth(base * scale * 1.5);\n    setHeight(base * scale);           \n  }\n\n  window.onresize = () => {\n    setDimensions()\n  }\n\n  useEffect(() => {\n    setDimensions();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Canvas width={width} height={height} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}